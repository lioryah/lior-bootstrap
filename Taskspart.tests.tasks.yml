version: "3"
vars:
  ### _title_: tests taskpart ###

  # step properties
  step_header: __block_key__="{{.block_key}}"
  step_init: '{{ if .quite }}      {{else}} echo @[task]@ act=init ${__block_key__} {{end}}'
  step_over: '{{ if .quite }} echo {{else}} echo @[task]@ act=over ${__block_key__} {{end}}'

tasks:
#  md
# ```yaml
  run-as-step-sh:
    desc: runs provided shell command as step
    args:
      block_key: block id key token. sample. "block=step goal='arrange. check that input exists'"
      step_body: step commands text
    cmds:
      - |-
        {{.step_init}}
        {{.step_body}}
        {{.step_over}}

  run-as-step-py:
    desc: runs provided python command as step reports result
    args:
      script: "python script with no single ['] inside". sample. script=print("Hello world")
    cmds:
      - |-
        {{.step_init}}
        RESULT_KEYTOK=$(python -c '
        {{.script}}
        ')
        {{.__step_over__}} ${RESULT_KEYTOK}

  test-task-run-sample:
    desc: test that run-sample task is working
    vars:
      input_img_path: 'Backchannel-Lena-Soderberg-FA.jpg'
      output_img_path: '{{.input_img_path}}.run-sample._out.jpg'
    cmds:
      - task: run-as-step
        vars:
          name: s1.ArangeStep.check.that.input.exists
          body: |-
            python -c '
            import os.path;
            assert os.path.exists("{{.input_img_path}}")
            '
      - task: run-as-step
        vars:
          name: s2.ActStep.run.filepper.on.sample
          body: |-
            task run-sample \
              input_img_path={{.input_img_path}} \
              output_img_path={{.output_img_path}}

      - task: run-as-step
        vars:
          name: s2.AssertStep. check that output is correct
          script: |-
            import os.path; import json
            assert os.path.exists("{{.output_img_path}}"), "Missing File"
            size = os.path.getsize("{{.output_img_path}}")
            assert size > 0, "Empty File"
            # info_str = f"""{"name": "{{.name}}", "info": {"size": size}}"""
            info_d = dict(name="{{.name}}", info={"size": size})
            info_str = json.dumps(info_d)
            print(info_str)


# ```
# /md

